<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Prints a particular instance of acumulus
 * 
 * @package    mod_acumulus
 * @copyright  2016 Alexandre Lage
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

// Replace acumulus with the name of your module and remove this line.

require_once(dirname(dirname(dirname(__FILE__))).'/config.php');
require_once(dirname(__FILE__).'/lib.php');

$id = optional_param('id', 0, PARAM_INT); // Course_module ID, or
$a  = optional_param('n', 0, PARAM_INT);  // ... acumulus instance ID - it should be named as the first character of the module.

if ($id) {
    $cm         = get_coursemodule_from_id('acumulus', $id, 0, false, MUST_EXIST);
    $course     = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
    $acumulus  = $DB->get_record('acumulus', array('id' => $cm->instance), '*', MUST_EXIST);
} else if ($a) {
    $acumulus  = $DB->get_record('acumulus', array('id' => $n), '*', MUST_EXIST);
    $course     = $DB->get_record('course', array('id' => $acumulus->course), '*', MUST_EXIST);
    $cm         = get_coursemodule_from_instance('acumulus', $acumulus->id, $course->id, false, MUST_EXIST);
} else {
    error('You must specify a course_module ID or an instance ID');
}
// Get course context
//var_dump($course);
$coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);

require_login($course, true, $cm);
require_capability('mod/acumulus:view', $coursecontext);

/* Check if user has "view hidden sections" capabitities (works)
if (!has_capability('moodle/course:viewhiddensections', $coursecontext)) {
echo "is Student<br/>";
}
*/

/*$event = \mod_acumulus\event\course_module_viewed::create(array(

    'objectid' => $PAGE->cm->instance,
    'context' => $PAGE->context,
));
$event->add_record_snapshot('course', $PAGE->course);
$event->add_record_snapshot($PAGE->cm->modname, $acumulus);
$event->trigger();
 * 
 */
// Print the page header.

$PAGE->set_url('/mod/acumulus/view.php', array('id' => $cm->id));
$PAGE->set_title(format_string($acumulus->name));
$PAGE->set_heading(format_string($course->fullname));

//Send variables to activity

//Check referrer url
if(isset($_SERVER["HTTP_REFERER"])){
	$referrerurl=$_SERVER["HTTP_REFERER"]; //@TODO: Avoid undefined index "HTTP_REFERRER" if the user comes from an offline url
}else{
	$referrerurl=null;
}
$referrerfilename=pathinfo($referrerurl, PATHINFO_FILENAME);
$parsedurl=parse_url($referrerurl);

//var_dump($parsedurl);
//var_dump($referrerfilename);
//var_dump($parsedurl["query"]);
//var_dump(strpos($parsedurl["query"], "update=$id"));
//var_dump(strpos($parsedurl["query"], "add=acumulus"));
if((empty($CFG->i_initials) || empty($CFG->i_moodle_url)) || (empty($CFG->i_key) || empty($CFG->i_acumulus_url))){
	redirect("./../../admin/settings.php?section=modsettingacumulus", "Por favor, preencha as configurações do plugin.", 2);
	die();
}

else if($referrerfilename=="modedit"){
	// it came from moedit.php? 
	
	// it came from add or update page?
	if(strpos($parsedurl["query"], "update=$id")!==false){ // TODO: it is not enough to check the referrer query. Another if() can be implemented
		
		// set new fields to $acumulus activity object 
		$acumulus->id = $id;
		$acumulus->initials = $CFG->i_initials;
		$acumulus->key = $CFG->i_key;
		$acumulus->moodleURL = $CFG->i_moodle_url;
		
		// encode $acumulus activity in order to avoid tumpering
		// it'll be sent to the Acumulus system
		$encodeddata=base64_encode(json_encode($acumulus, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE));
		
		// set url to update activity
		$urltoacumulus = $CFG->i_acumulus_url."/moodle/activity.php?acumulus=$encodeddata&action=update";
		//header("Location: $url");
		//redirect($urltoacumulus, "Por favor aguarde 1s. Estamos configurando o sistema Acumulus.", $delay=0);
		echo "<iframe src=\"".$urltoacumulus."\" width=\"100%\" height=\"800px\" frameborder=\"0\"></iframe>";
		
		
	}else if(strpos($parsedurl["query"], "add=acumulus")!==false){
		
		// set new fields to $acumulus activity object, same as above
		$acumulus->id = $id;
		$acumulus->initials = $CFG->i_initials; 
		$acumulus->key = $CFG->i_key;
		$acumulus->moodleURL = $CFG->i_moodle_url;
		
		// encode $acumulus activity in order to avoid tumpering
		// it'll be sent to the Acumulus system
		$encodeddata=base64_encode(json_encode($acumulus, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE));
				
		// set url to add new activity
		$urltoacumulus = $CFG->i_acumulus_url."/moodle/activity.php?acumulus=$encodeddata&action=add";
		//header("Location: $url");
		//redirect($urltoacumulus, "Por favor aguade 1s. Estamos configurando o sistema Acumulus.", $delay=0);
		echo "<iframe src=\"".$urltoacumulus."\" width=\"100%\" height=\"800px\" frameborder=\"0\"></iframe>";
		
	}
	
}

/*
 * Other things you may want to set - remove if not needed.
 * $PAGE->set_cacheable(false);
 * $PAGE->set_focuscontrol('some-html-id');
 * $PAGE->add_body_class('acumulus-'.$somevar);
 */

// Output starts here.
echo $OUTPUT->header();

// FIRST TITLE
//echo $OUTPUT->heading('Acumulus - produção textual, educação ativa, melhores resultados.');
//echo $OUTPUT->heading(format_string($acumulus->name));

/*
// Conditions to show the intro can change to look for own settings or whatever.
if ($acumulus->intro) {
    //echo "Descrição do trabalho: ";
	echo $OUTPUT->box(format_module_intro('acumulus', $acumulus, $cm->id), 'generalbox mod_introbox', 'acumulusintro');
}


// SUMARY
echo $OUTPUT->heading('Sumário');
if ($acumulus->timedue) {
	//Datas
	view_dates();
}
*/

	//Prepare data to send to Acumulus
	$data = new stdClass();
	$data->initials = $CFG->sigla_instituicao; // TODO: change "sigla_instituicao" and "chave_instituicao" to english
	$data->key = $CFG->chave_instituicao;
	$data->activityid = $id;
	// encode $acumulus activity in order to avoid tumpering
	// it'll be sent to the Acumulus system
	

// Check if user is enrolled
// If yes, allow paper submission 
if(is_enrolled($coursecontext) && has_capability('mod/acumulus:submit', $coursecontext, $USER->id, false)){
	//echo "<p>This user is enrolled and has capabitity to submitt activity.</p>";

	//Prepare specific data for "enrolled students"
	$data->timedue = $acumulus->timedue;
	$data->userid = $USER->id;
	$encodeddata=base64_encode(json_encode($data, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE));
	
	// iframe
	echo "<iframe src=\"".$CFG->i_acumulus_url."/moodle/sendPaper.php?acumulus=$encodeddata\" width=\"100%\" height=\"800px\" frameborder=\"0\"></iframe>";
}

//Check if user has teacher capabilities
if (has_capability('mod/acumulus:addinstance', $coursecontext, $USER->id, false) || has_capability('moodle/course:manageactivities', $coursecontext, $USER->id, false) ) {
//echo "<br>This user has capabitilies to AddInstance or Manage activities.<br>";

	$encodeddata=base64_encode(json_encode($data, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE));
	//@TODO: Print submitted papers:
	echo "<iframe src=\"".$CFG->i_acumulus_url."/moodle/viewAllPapers.php?acumulus=$encodeddata\" width=\"100%\" height=\"800px\" frameborder=\"0\"></iframe>";

	 

}

// Finish the page.
echo $OUTPUT->footer();



/*
 * 
 * 
 * Functions
 * 
 * 
 */

function view_dates() {
    //"global" set global variables which will be used inside this function <3    
	global $USER, $CFG, $OUTPUT, $acumulus;

        if (!$acumulus->timeavailable && !$acumulus->timedue) {
            return;
        }

        echo $OUTPUT->box_start('generalbox boxaligncenter', 'dates');
        echo "<strong>Prazos: </strong>";
        echo '<table>';
        if ($acumulus->timeavailable) {
            echo '<tr><td class="c0">'.get_string('availabledate','assignment').':</td>';
            echo '    <td class="c1">'.userdate($acumulus->timeavailable).'</td></tr>';
        }
        if ($acumulus->timedue) {
            echo '<tr><td class="c0">'.get_string('duedate','assignment').':</td>';
            echo '    <td class="c1">'.userdate($acumulus->timedue).'</td></tr>';
        }
        /*
        $submission = $this->get_submission($USER->id);
        if ($submission) {
            echo '<tr><td class="c0">'.get_string('lastedited').':</td>';
            echo '    <td class="c1">'.userdate($submission->timemodified);
        /// Decide what to count
            if ($CFG->assignment_itemstocount == ASSIGNMENT_COUNT_WORDS) {
                echo ' ('.get_string('numwords', '', count_words(format_text($submission->data1, $submission->data2))).')</td></tr>';
            } else if ($CFG->assignment_itemstocount == ASSIGNMENT_COUNT_LETTERS) {
                echo ' ('.get_string('numletters', '', count_letters(format_text($submission->data1, $submission->data2))).')</td></tr>';
            }
        }
        */
        echo '</table>';
        echo $OUTPUT->box_end();
    }

?>
